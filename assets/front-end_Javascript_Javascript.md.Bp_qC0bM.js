import{_ as e,c as r,a2 as t,o}from"./chunks/framework.0Bx0CPYg.js";const u=JSON.parse('{"title":"Javascript 基础","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/Javascript/Javascript.md","filePath":"front-end/Javascript/Javascript.md","lastUpdated":1728817131000}'),i={name:"front-end/Javascript/Javascript.md"};function l(h,a,n,d,s,c){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="javascript-基础" tabindex="-1">Javascript 基础 <a class="header-anchor" href="#javascript-基础" aria-label="Permalink to &quot;Javascript 基础&quot;">​</a></h1><h2 id="_1-数据类型" tabindex="-1">1.数据类型 <a class="header-anchor" href="#_1-数据类型" aria-label="Permalink to &quot;1.数据类型&quot;">​</a></h2><h2 id="_2-数据类型的检测" tabindex="-1">2.数据类型的检测 <a class="header-anchor" href="#_2-数据类型的检测" aria-label="Permalink to &quot;2.数据类型的检测&quot;">​</a></h2><h2 id="_3-instanceof-的原理与实现" tabindex="-1">3.instanceof 的原理与实现 <a class="header-anchor" href="#_3-instanceof-的原理与实现" aria-label="Permalink to &quot;3.instanceof 的原理与实现&quot;">​</a></h2><h2 id="_3-判断数组的方式" tabindex="-1">3.判断数组的方式 <a class="header-anchor" href="#_3-判断数组的方式" aria-label="Permalink to &quot;3.判断数组的方式&quot;">​</a></h2><h2 id="_4-typeof-null-结果-为什么" tabindex="-1">4.typeof null 结果，为什么 <a class="header-anchor" href="#_4-typeof-null-结果-为什么" aria-label="Permalink to &quot;4.typeof null 结果，为什么&quot;">​</a></h2><h2 id="_5-nan-相关" tabindex="-1">5.NaN 相关 <a class="header-anchor" href="#_5-nan-相关" aria-label="Permalink to &quot;5.NaN 相关&quot;">​</a></h2><h2 id="_6-操作符的强制转化类型规则" tabindex="-1">6.==操作符的强制转化类型规则 <a class="header-anchor" href="#_6-操作符的强制转化类型规则" aria-label="Permalink to &quot;6.==操作符的强制转化类型规则&quot;">​</a></h2><h2 id="_7-隐式转化" tabindex="-1">7.隐式转化 <a class="header-anchor" href="#_7-隐式转化" aria-label="Permalink to &quot;7.隐式转化&quot;">​</a></h2><h2 id="_8-let、const、var-的区别" tabindex="-1">8.let、const、var 的区别 <a class="header-anchor" href="#_8-let、const、var-的区别" aria-label="Permalink to &quot;8.let、const、var 的区别&quot;">​</a></h2><h2 id="_9-箭头函数和普通函数的区别" tabindex="-1">9.箭头函数和普通函数的区别 <a class="header-anchor" href="#_9-箭头函数和普通函数的区别" aria-label="Permalink to &quot;9.箭头函数和普通函数的区别&quot;">​</a></h2><h2 id="_10-扩展运算符" tabindex="-1">10.扩展运算符 <a class="header-anchor" href="#_10-扩展运算符" aria-label="Permalink to &quot;10.扩展运算符&quot;">​</a></h2><h2 id="_11-map-和-object-的区别" tabindex="-1">11.Map 和 Object 的区别 <a class="header-anchor" href="#_11-map-和-object-的区别" aria-label="Permalink to &quot;11.Map 和 Object 的区别&quot;">​</a></h2><h2 id="_12-map-和-weakmap" tabindex="-1">12.Map 和 weakMap <a class="header-anchor" href="#_12-map-和-weakmap" aria-label="Permalink to &quot;12.Map 和 weakMap&quot;">​</a></h2><h2 id="_13-常见-dom-操作" tabindex="-1">13.常见 DOM 操作 <a class="header-anchor" href="#_13-常见-dom-操作" aria-label="Permalink to &quot;13.常见 DOM 操作&quot;">​</a></h2><h2 id="_14-for-in-和-for-of" tabindex="-1">14.for...in 和 for...of <a class="header-anchor" href="#_14-for-in-和-for-of" aria-label="Permalink to &quot;14.for...in 和 for...of&quot;">​</a></h2><h2 id="_15-怎么让-for-of-遍历对象" tabindex="-1">15.怎么让 for...of 遍历对象 <a class="header-anchor" href="#_15-怎么让-for-of-遍历对象" aria-label="Permalink to &quot;15.怎么让 for...of 遍历对象&quot;">​</a></h2><h2 id="_16-原型和原型链" tabindex="-1">16.原型和原型链 <a class="header-anchor" href="#_16-原型和原型链" aria-label="Permalink to &quot;16.原型和原型链&quot;">​</a></h2><h2 id="_17-闭包" tabindex="-1">17.闭包 <a class="header-anchor" href="#_17-闭包" aria-label="Permalink to &quot;17.闭包&quot;">​</a></h2><h2 id="_18-作用域和作用域链" tabindex="-1">18. 作用域和作用域链 <a class="header-anchor" href="#_18-作用域和作用域链" aria-label="Permalink to &quot;18. 作用域和作用域链&quot;">​</a></h2><h2 id="_19-this-指向" tabindex="-1">19.this 指向 <a class="header-anchor" href="#_19-this-指向" aria-label="Permalink to &quot;19.this 指向&quot;">​</a></h2><h2 id="_20-call-apply-bind" tabindex="-1">20.call/apply/bind <a class="header-anchor" href="#_20-call-apply-bind" aria-label="Permalink to &quot;20.call/apply/bind&quot;">​</a></h2><h2 id="_21-js-创建对象的方式" tabindex="-1">21.js 创建对象的方式 <a class="header-anchor" href="#_21-js-创建对象的方式" aria-label="Permalink to &quot;21.js 创建对象的方式&quot;">​</a></h2><h2 id="_22-继承" tabindex="-1">22.继承 <a class="header-anchor" href="#_22-继承" aria-label="Permalink to &quot;22.继承&quot;">​</a></h2><h2 id="_23-垃圾回收机制" tabindex="-1">23.垃圾回收机制 <a class="header-anchor" href="#_23-垃圾回收机制" aria-label="Permalink to &quot;23.垃圾回收机制&quot;">​</a></h2>',25)]))}const b=e(i,[["render",l]]);export{u as __pageData,b as default};
