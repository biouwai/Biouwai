import{_ as i,c as a,a2 as t,o as l}from"./chunks/framework.0Bx0CPYg.js";const n="/Biouwai/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95.png",e="/Biouwai/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95.png",u=JSON.parse('{"title":"Js 方法工具箱","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/Javascript/Js方法工具箱.md","filePath":"front-end/Javascript/Js方法工具箱.md","lastUpdated":1728817131000}'),r={name:"front-end/Javascript/Js方法工具箱.md"};function p(o,s,k,h,g,c){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="js-方法工具箱" tabindex="-1">Js 方法工具箱 <a class="header-anchor" href="#js-方法工具箱" aria-label="Permalink to &quot;Js 方法工具箱&quot;">​</a></h1><h2 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-label="Permalink to &quot;数组方法&quot;">​</a></h2><details class="details custom-block"><summary>自己手写</summary><h3 id="不改变原数组-返回值要用变量来接收" tabindex="-1">不改变原数组 （返回值要用变量来接收） <a class="header-anchor" href="#不改变原数组-返回值要用变量来接收" aria-label="Permalink to &quot;不改变原数组 （返回值要用变量来接收）&quot;">​</a></h3><ol><li><p><strong>concat()</strong> -&gt; 连接两个<strong>或更多</strong>的数组，并返回结果。</p><blockquote><p>array1.concat(array2, array3,..., arrayX)</p></blockquote></li><li><p><strong>entries()</strong> 返回数组的可迭代对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fruits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Banana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fruits.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().value;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Banana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p><strong>keys()</strong> 用于从数组创建一个包含数组键的可迭代对象。</p></li><li><p><strong>values()</strong> 用于从数组创建一个包含数组键的可迭代对象。</p></li><li><p><strong>every()</strong> -&gt; 检测数值元素的每个元素是否<strong>都</strong>符合条件。</p><blockquote><p>array.every(function(currentValue,index,arr), thisValue)</p></blockquote><blockquote><p>index、arr 可选，thisValue 默认为 undefined,</p></blockquote><blockquote><p>thisValue 是执行 callbackFn 时用作 this 的值。参见迭代方法</p></blockquote></li><li><p><strong>some()</strong> 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><blockquote><p>参数同 every，一项满足就满足</p></blockquote></li><li><p><strong>filter()</strong> -&gt; 检测数值元素，并返回符合条件所有元素的数组。</p><blockquote><p>array.filter(function(currentValue,index,arr), thisValue)</p></blockquote></li><li><p><strong>find()</strong> -&gt; 返回符合传入测试（函数）条件的数组的<strong>第一个</strong>元素的值</p><blockquote><p>如果没有符合条件的元素返回 undefined</p></blockquote></li><li><p><strong>findIndex()</strong> -&gt; 返回符合传入测试（函数）条件的数组元素索引</p><blockquote><p>否则返回-1</p></blockquote></li><li><p><strong>forEach()</strong> -&gt; 数组每个元素都执行一次回调函数。</p><blockquote><p>array.forEach(callbackFn(currentValue, index, arr), thisValue) 相当于将每个数组复制一遍拿来操作，只复制了最外层</p></blockquote></li><li><p><strong>from()</strong> -&gt; 用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组。</p><blockquote><p>如果对象是数组返回 true，否则返回 false。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myArr = [&#39;b&#39;,&#39;o&#39;,&#39;y&#39;]</span></span></code></pre></div></li><li><p><strong>includes()</strong> -&gt; 用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。</p><blockquote><p>arr.includes(searchElement) arr.includes(searchElement, fromIndex)</p></blockquote><blockquote><p>fromIndex -&gt; 可选。从该索引处开始查找 searchElement。如果为负值，则按升序&gt; 从 array.length + fromIndex 的索引开始搜索。默认为 0。</p></blockquote><blockquote><p>[1, 2, 3].includes(2); // true</p></blockquote><blockquote><p>[1, 2, 3].includes(4); // false</p></blockquote><blockquote><p>[1, 2, 3].includes(3, 3); // false</p></blockquote><blockquote><p>[1, 2, 3].includes(3, -1); // true</p></blockquote><blockquote><p>[1, 2, NaN].includes(NaN); // true</p></blockquote></li><li><p><strong>indexOf()</strong> -&gt; 搜索数组中的第一个元素，并返回它所在的位置，否则返回-1。</p></li><li><p><strong>lastIndexOf()</strong> -&gt; 搜索数组中的最后一个元素，并返回它所在的位置，否则返回-1。</p></li><li><p><strong>Array.isArray(obj)</strong> -&gt; 判断是否为数组</p></li><li><p><strong>map()</strong> -&gt; 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p></li><li><p><strong>reduce()</strong> -&gt; 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><blockquote><p>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p></blockquote><blockquote><p>没有 initialValue，第一项就为 initialValue，从第二项开始执行函数</p></blockquote></li><li><p><strong>reduceRight()</strong> -&gt; 反着来</p></li><li><p><strong>slice()</strong> -&gt; 可从已有的数组中返回选定的元素</p><blockquote><p>不改变原数组</p></blockquote><blockquote><p>array.slice(start, end), 左闭右开，-数表示倒数</p></blockquote></li><li><p><strong>join()</strong> -&gt; 方法用于把数组中的所有元素转换一个字符串</p><blockquote><p>array.join(separator) -&gt; 若省略 separator，则逗号为分隔符</p></blockquote></li><li><p><strong>toString()</strong> 把数组转换为字符串，并返回结果。，分割符为&#39;,&#39;,相当于 jion()或 jion(&#39;,&#39;)</p></li><li><p><strong>from()</strong> -&gt; 通过给定的对象中创建一个数组。</p></li></ol><h3 id="改变原数组" tabindex="-1">改变原数组 <a class="header-anchor" href="#改变原数组" aria-label="Permalink to &quot;改变原数组&quot;">​</a></h3><ol><li><p><strong>fill()</strong> -&gt; 使用一个固定值来填充数组。</p><blockquote><p>array.fill(value, start, end) [start、end) 可选</p></blockquote></li><li><p><strong>unshift + shift + push + pop</strong> -&gt; 头增 + 头删 + 尾增 + 尾删，并返回新长度</p></li><li><p><strong>sort()</strong> -&gt; 用于对数组的元素进行排序。</p><blockquote><p>默认按字母排序，若要按数字升序 points.sort((a,b)=&gt;a-b);</p></blockquote></li><li><p><strong>reverse()</strong> -&gt; 用于颠倒数组中元素的顺序。</p></li><li><p><strong>splice()</strong> -&gt; 改变原数组，返回新数组</p><blockquote><p>array.splice(index,howmany,item1,.....,itemX) index 起始位，howmany 几个， item 加入的元素 返回删除的元素</p></blockquote></li></ol></details><p><strong>查看图片可放大浏览器</strong><img src="`+n+'" alt="数组方法"> 参考菜鸟教程<a href="https://www.runoob.com/jsref/jsref-obj-array.html" target="_blank" rel="noreferrer">数组方法</a></p><h2 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-label="Permalink to &quot;字符串方法&quot;">​</a></h2><p><img src="'+e+'" alt="字符串方法"> 参考菜鸟教程<a href="https://www.runoob.com/jsref/jsref-obj-string.html" target="_blank" rel="noreferrer">字符串方法</a></p>',6)]))}const E=i(r,[["render",p]]);export{u as __pageData,E as default};
